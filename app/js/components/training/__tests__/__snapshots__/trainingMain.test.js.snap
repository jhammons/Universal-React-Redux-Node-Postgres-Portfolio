// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TrainingMain /> snapshot matches 1`] = `
<div
  className="training-main container-fluid"
>
  <h2>
    Front End/Full Stack Development Bootcamp
  </h2>
  <img
    alt="Front End Development Bootcamp"
    className="bootcamp-img"
    src="test-file-stub"
  />
  <p>
    Over the years I have helped hundreds of students from many backgrounds, interests and levels of experience unravel the mysteries of web development. Whether you are a brand new developer or just need to learn the front end, I can teach you best practices and help you get off to a proper and
     
    <strong>
      current
    </strong>
     start.
  </p>
  <p>
    This program focuses on gaining an understanding of the
     
    <strong>
      fundamentals
    </strong>
     of development and as such is not for casual students. If for example you just need to make a site/app for your business and have limited time, this is probably not for you. On the other hand if you are interested in a career as a Front End or Full Stack Developer, or maybe if the front end has been a missing link in your CS program or code school, this could be right up your alley.
  </p>
  <p>
    What I am offering beginners or intermediates is a group of courses divided into 3 parts. The first two are enough if you're mainly concerned about front end. A third part is available if you'd like to take things a step further and explore the back end (full stack). This is not a dusty old program where the skills you learn are already obsolete. We will prioritize the fundamentals because they are more or less a constant, but we will also be using some of the very latest tools, patterns and best practices.
  </p>
  <div
    className="part1"
  >
    <h3>
      Part 1: Html 5 and CSS
    </h3>
    <p>
      <strong>
        Lecture Time:
      </strong>
       Approximately 8-10 two hour sessions | 
      <strong>
        Homework Time:
      </strong>
       3-6 hours /week |
       
      <strong>
        Prerequisite:
      </strong>
       none, anyone is welcome!
    </p>
    <p>
      Part one begins with a survey into the various technologies that make up the web stack then focuses on HTML and CSS. It's easy to get the impression that html/css are "easy". This is because these days the pundits aren't talking about them as much, due to the fact that they're not as fresh and exciting as they used to be. Many tutorials glance over html/css and tend to give you the assumption that frameworks like Bootstrap will take care of things. But unless your focus ends up on simple prototypes that look like every other Bootstrap app (in which case you can expect that your app will become as popular as going to the Dentist), this is dangerous thinking! The ability to create a user interface involves html, css and javascript, at a minimum. In this program, CSS and HTML are treated as first class citizens. This will make your skills more marketable and the entire road ahead much easier.
    </p>
    <p>
      Note that this track or demonstrated knowledge is a prerequisite for the rest of the program.
    </p>
    <AccordionPane>
      <h4
        className="faq-header"
      >
        Part I goals 
        <span>
           - click to expand
        </span>
      </h4>
      <div
        className="faq-body"
      >
        <ul>
          <li>
            Start with a talk and see some demos about the various web technologies, current trends, and where/why they come into play
          </li>
          <li>
            Set up a real front end environment. Choose and configure a code editor, install Node, Git and other tools
          </li>
          <li>
            Git, Github and terminal basics. We will use Git throughout the course to communicate and collaborate on projects
          </li>
          <li>
            Basics of html5 and css3 including the dom, cascade and inheritance, box model, inline vs. block, layout strategies and more
          </li>
          <li>
            Proper use of semantic markup and metadata for search engines, accessibility and machine scraping
          </li>
          <li>
            CSS resets for normalizing browser compatibility
          </li>
          <li>
            Creating a simple blog style web page with the above strategies applied, basic styling but no layout yet
          </li>
          <li>
            Creating a more detailed and interesting responsive home page with some layout challenges
          </li>
          <li>
            Adding an interior pages that share a main template but with some layout and other changes
          </li>
          <li>
            Working with flexbox and media queries to create responsive, fluid layouts that adapt to all screen sizes
          </li>
          <li>
            CSS animation basics
          </li>
          <li>
            Using Chrome Developer Tools to debug code in the browser and online tools to test and identify issues
          </li>
          <li>
            Basic FTP deployment
          </li>
          <li>
            Recommended: Bootstrap and Sass
          </li>
          <li>
            Optional: Any areas of interest that you might have like translating a design from a mockup, etc.
          </li>
        </ul>
      </div>
    </AccordionPane>
  </div>
  <div
    className="part2"
  >
    <h3>
      Part 2: Javascript and Tooling
    </h3>
    <p>
      <strong>
        Lecture Time:
      </strong>
       Approximately 10-15 two hour sessions | 
      <strong>
        Homework Time:
      </strong>
       3-6 hours /week |
       
      <strong>
        Prerequisites:
      </strong>
       Part 1 or demonstrate ability
    </p>
    <p>
      For the better or worse, Javascript is now the world's most popular programing language. It is used for everything from user interface interactivity in the browser to the entirety of an application's logic. This course has two goals. First to give you a good grasp on the fundamentals of the language and programming habits. Second to give you some practice implementing the typical needs of client side web apps. Our main focus will be on vanilla ES6 because this is the most important knowledge to have, but if your time and budget allows we will also cover React/Redux. We will also be covering the modern frontend development environment including NPM, Babel, Eslint and Webpack.
    </p>
    <p>
      Part one (or demonstrated knowledge) is a prerequisite for this track.
    </p>
    <AccordionPane>
      <h4
        className="faq-header"
      >
        Part II goals 
        <span>
          - click to expand
        </span>
      </h4>
      <div
        className="faq-body"
      >
        <ul>
          <li>
            Start with a talk about how it works, the common frameworks and libraries, how to best ask questions, find documentation, etc.
          </li>
          <li>
            Javascript ES6+ syntax: operators, primitives, arrays, objects, loops, functions, classes, etc.
          </li>
          <li>
            Javascript scope
          </li>
          <li>
            Common Javascript patterns including object literal, classical & prototypal inheritance, composition, closures, MVC and functional programming
          </li>
          <li>
            Higher order functions like filter, map and reduce
          </li>
          <li>
            Dom selection/manipulation
          </li>
          <li>
            Event handling and common UI interactions
          </li>
          <li>
            Forms and form validation
          </li>
          <li>
            Using browser dev tools to debug, set breakpoints, view network requests, etc.
          </li>
          <li>
            Using a module loader (Webpack) and the ES6 module pattern
          </li>
          <li>
            Using Webpack to compile ES6+, SASS, lint using ESLint, live reload, and to automate asset management to acheive better front end performance
          </li>
          <li>
            Working with REST, JSON and AJAX, understanding the HTTP lifecycle
          </li>
          <li>
            Asynchronous Javascript: callbacks vs. Promise vs. Async/Await
          </li>
          <li>
            Working with 3rd party APIs and generating a mock database/api with Json Web Server for prototyping
          </li>
          <li>
            Various small Javascript projects in vanilla Javascript
          </li>
          <li>
            Recommended: Intro to unit testing with Mocha and Chai or Jest
          </li>
          <li>
            Recommended: Working with a JS framework (React)
          </li>
          <li>
            Recommended: Redux for managing state
          </li>
          <li>
            Recommended: More advanced React patterns and/or addons like React Router, Redux Form, UI toolkits, etc.
             
          </li>
          <li>
            Optional: Introduction to jQuery. jQuery is less important nowadays, but since it's still common it can be a good idea to at least learn the basics
          </li>
          <li>
            Optional: Any areas of interest
          </li>
        </ul>
      </div>
    </AccordionPane>
  </div>
  <div
    className="part3"
  >
    <h3>
      Part 3 (optional): Full Stack 
    </h3>
    <p>
      <strong>
        Lecture Time:
      </strong>
       Approximately 8-15 two hour sessions | 
      <strong>
        Homework Time:
      </strong>
       3-6++ hours /week | 
      <strong>
        Prerequisites:
      </strong>
       Parts 1 and 2, or demonstrated knowledge
    </p>
    <p>
      When Node started becoming popular around 2011, the writing was on the wall that the lines between front and back end would begin to fade. If you know already Javascript, you've already taken a big step towards full stack. There are a lot of new concepts like databases and servers to learn, and of course there are other popular programming languages like Ruby, Java, Python, Go and many others. That said, since Node.js is basically Javascript, you already have taken the large step. These days having full stack ability in Javascript is quite valuable and will set you apart. Our focus will be on Node, Express, Mysql (or Postgres), Linux and basic devops. How far we go in this section is up to you. You don't have to tackle everything on the backend at once and the following is mainly a recommendation for a good starting point.
    </p>
    <p>
      Both parts one and two (or demonstrated knowledge) are prerequisites for moving into the Full Stack.
    </p>
    <AccordionPane>
      <h4
        className="faq-header"
      >
        Part III goals 
        <span>
          - click to expand
        </span>
      </h4>
      <div
        className="faq-body"
      >
        <ul>
          <li>
            Start with a talk about the various technologies, programming languages and infrastructures involved in the back end, along with some of the pros and cons
          </li>
          <li>
            Set up an Amazon EC2 or Digital Ocean instance and Introduction to Linux OS
          </li>
          <li>
            Bash commands, simple Bash scripting, SSH, Curl and Apt, the Linux package manager
          </li>
          <li>
            Learn about security and how to harden the server against common threats
          </li>
          <li>
            Introduction and configuring the Nginx webserver and MySql (or Postgres)
          </li>
          <li>
            Node.js and Javascript on the server
          </li>
          <li>
            Express.js to handle both traditional server rendered routing and expose a REST API
          </li>
          <li>
            SQL basics
          </li>
          <li>
            Integrate a database with node templates (EJS or Jade/Pug) and with a REST API
          </li>
          <li>
            Add signup, login and authentication using a stateless JWT (json web token) and/or traditional cookie based with Passport.js
          </li>
          <li>
            Learn CRUD basics (create, read, update, delete) by making a simple Content Management System using Javascript, Node/Express and Mysql
          </li>
          <li>
            Deployment with Git. Discussion and/or implementation of newer and more enterprise strategies like containers, microservices and cloud services like AWS Lambda or Firebase
          </li>
          <li>
            Setting up production Node, SSL, Nginx reverse proxy and PM2
          </li>
          <li>
            Optional: Add pagination, user filters and sorting widgets to lists of content from the CMS
          </li>
          <li>
            Optional: Create a full stack social network app with user posts, comments and likes. React on the front end (or plain Javascript if you don't know it), REST API and database on the backend
          </li>
          <li>
            Optional: Add a search with typeahead (show suggestions as you type) to the Social Network app
          </li>
          <li>
            Optional: Working with Sequelize, a database ORM for Node
          </li>
          <li>
            Optional: Alternative authentication methods like JWT, Oauth and OpenId (ex: register with Google, etc.)
          </li>
          <li>
            Optional: Make a real time app with Websockets
          </li>
          <li>
            Optional: Universal/Isomorphic React (React on the server for better SEO/performance)
          </li>
          <li>
            Optional: Any areas of interest
          </li>
        </ul>
        <p>
          If you have any questions about the program, don't hesitate to ask. I'm always happy to set up a call to answer your questions, explain the program and even talk about your other options in an unbiased way.
        </p>
      </div>
    </AccordionPane>
  </div>
  <FAQs />
</div>
`;
